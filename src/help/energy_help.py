# This is an autogenerated file -- Do not edit
# Edit the source file in artisan/doc/help_dialogs/Input_files
# then execute artisan/doc/help_dialogs/Script/xlsx_to_artisan_help.py
import prettytable
import re
try:
    from PyQt6.QtWidgets import QApplication # @Reimport @UnresolvedImport @UnusedImport # pylint: disable=import-error
except Exception: # pylint: disable=broad-except
    from PyQt5.QtWidgets import QApplication # type: ignore # @Reimport @UnresolvedImport @UnusedImport

def content() -> str:
    strlist = []
    helpstr = ''  # noqa: F841 #@UnusedVariable # pylint: disable=unused-variable
    newline = '\n'  # noqa: F841 #@UnusedVariable  # pylint: disable=unused-variable
    strlist.append('<head><style> td, th {border: 1px solid #ddd;  padding: 6px;} th {padding-top: 6px;padding-bottom: 6px;text-align: left;background-color: #0C6AA6; color: white;} </style></head> <body>')
    strlist.append('<b>')
    strlist.append(QApplication.translate('HelpDlg','Energy and CO2 Calculator'))
    strlist.append('</b>')
    tbl_Introtop = prettytable.PrettyTable()
    tbl_Introtop.header = False
    tbl_Introtop.add_row([QApplication.translate('HelpDlg','The Energy tab displays a roast&#39;s energy consumption.   CO2 emissions are also calculated to monitor the impact of the roasting operation.  Settings must be made for each energy load.  Loads are the main burners, motors and blowers, and an afterburner if one is used.  The energy used for pre-heating, between batch, and roaster cooling protocols are included in the calculations, and settings are available for them as well.\n\nNote that pre-heating and roaster cooling energy values are applied to the first roast of a roasting session.  Between batch energies are applied to every roast except the first.  Tick the "Between batches after Pre-Heating box to apply the between batch value to the first roast.\n\nFollow the steps below to set the energy inputs for the roast machine and afterburner.')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','Blank entries  are the same as a zero entry.  Negative values are not allowed.')])
    strlist.append(tbl_Introtop.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_Introbottom = prettytable.PrettyTable()
    tbl_Introbottom.header = False
    tbl_Introbottom.add_row([QApplication.translate('HelpDlg','Once you set up the Loads sub-tab and the Protocols sub-tab, it is a good idea to click "Save Defaults" on both  sub-tabs (they are saved separately).  When loading a profile with existing energy values, the profile settings will be read and will overwrite the values on the Loads and Profiles sub-tabs.  Having them saved as defaults allow for them to be quickly restored by clicking "Restore Defaults" on each sub-tab.')])
    strlist.append(tbl_Introbottom.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','1. Details Sub-Tab'))
    strlist.append('</b>')
    tbl_Detailstop = prettytable.PrettyTable()
    tbl_Detailstop.header = False
    tbl_Detailstop.add_row([QApplication.translate('HelpDlg','This sub-tab shows a detailed table of the energy consumption and CO2 production data for the roast.  The values in this table are based on current Profile and the settings made on the Loads and Protocols sub-tabs.  Columns may be sorted by clicking on the column title.  To return to original sort click on the &#39;Kind&#39; column title.')])
    strlist.append(tbl_Detailstop.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_Details = prettytable.PrettyTable()
    tbl_Details.field_names = [QApplication.translate('HelpDlg','Field'),QApplication.translate('HelpDlg','Description')]
    tbl_Details.add_row([QApplication.translate('HelpDlg','Results in'),QApplication.translate('HelpDlg','Choose the energy units for the summary displays and the Details sub-tab.')])
    strlist.append(tbl_Details.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','2. Loads Sub-Tab'))
    strlist.append('</b>')
    tbl_Loadstop = prettytable.PrettyTable()
    tbl_Loadstop.header = False
    tbl_Loadstop.add_row([QApplication.translate('HelpDlg','Begin by making entries on the Loads sub-tab  to define the sources of energy used by this roast. It might be a good idea to save those settings as defaults to be used to calculate the energy consumption of future roasts')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','Power ratings for up to four energy loads may be entered.  Loads will be the main burners or heaters, motors and blowers, and the afterburner if one is used.  Enter one load per line.  Motors and blowers that run continuously may be aggregated and entered as one load.')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','Loads are assumed to run continuously. Variable loads, such as the main burner setting, can be recorded in Artisan using one of the four special events.  The settings can be captured from a button, slider or in some cases read directly from the roaster.  The load setup allows linking a load to one of these events.  The energy calculator will then determine the setting percentage and the duration of the setting to calculate the energy consumed.')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','Burner entries require knowing the power rating of the burner.  Roasting machine manufacturer&#39;s typically provide this information.  If this information can not be found for your machine this table provides approximate values based on roaster capacities.  https://artisan-scope.org/ratings/')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','Energy Meters')+newline+QApplication.translate('HelpDlg','Artisan allows the direct reading of 2 energy meters to support the use of measured energy consumption values in place of estimated values defined by the Loads. These energy meters could measure gas or electricity. As an energy meter the instantaneous power reading must be accumulated over a period of time.  Energy readings are typically in kWh or BTU, though other units are supported.  Artisan will use the Meter reading at the start of recording and end of recording to calculate energy consumption for the roast batch.  Intermediate reads at major roast events are also used in presenting phase energy consumption.  ')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','Energy meter data must be recorded in an Extra Device (Config>> Devices>> Extra devices tab).  The Extra Device is then used as the Source for the meter in the Energy tab.  Connectivity to the meter is typically via MODBUS. Some devices, like the YoctoWatt, have direct connection support in Artisan.  The data recorded in the Extra Device must be scaled to one of the units supported in the Energy tab such as kWh, BTU, kJ, kCal or therms (thm).  For instance, an electricity meter that returns energy readings in Wh that must be scaled to kWh buy using the symbolic equation "x/1000". ')])
    strlist.append(tbl_Loadstop.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_Loads = prettytable.PrettyTable()
    tbl_Loads.field_names = [QApplication.translate('HelpDlg','Field'),QApplication.translate('HelpDlg','Description')]
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Label'),QApplication.translate('HelpDlg','Enter your personal description for this burner.  Examples are &#39;Main&#39; and &#39;Afterburner&#39;.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Rating'),QApplication.translate('HelpDlg','This is the power rating of the load  Choose the units in the next column.  ')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Unit'),QApplication.translate('HelpDlg','Select the appropriate power unit. Some manufacturers incorrectly use BTU.  In that case use BTU/h for the unit.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Fuel'),QApplication.translate('HelpDlg','Select the type of fuel used by this load  &#39;Elec&#39; is assumed to be electricity generated from dirty coal.  There is a setting below to adjust for renewable clean energy sources.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Event'),QApplication.translate('HelpDlg','Special Events are often used to record load settings, such as a burner setting, in the roast profile.  Select the Event that corresponds to the load setting here.  \n\nWhen blank the load is assumed to be at a constant setting, which is the percent &#39;Value 100%&#39; multiplied by the rating.  A 10 kW load at &#39;100% Value&#39;= 60 would thus be 10 kW * 60% = 6 kW. Continuous loads are typically motors and blowers and the afterburner.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Pressure %'),QApplication.translate('HelpDlg','For gas loads tick this box when  the readings are made in units of pressure.  Some roasters and some controllers provide readings in heat energy.  When the readings are made in heat energy leave this box unticked.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Value 0%'),QApplication.translate('HelpDlg','When an Event is selected in the previous column this value can be set to match the 0% burner setting to the event setting.  In most cases a 0 Event value will correspond to the 0% load setting.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Value 100%'),QApplication.translate('HelpDlg','When an Event is selected this value can be set to match the 100% load setting to the event setting.  This is useful when the 100% load setting is recorded as a different number in the Event.  For instance, maybe the burner event is recorded as 10x the kPa reading on the gas manometer.  An event value of 35 is recoded to signify 3.5 kPa, which is 50% pressure.  If the 100% burner setting corresponds to 7 kPa then the &#39;Value 100%&#39; should be set to 70, which is 7 * 10  = 70.  Thus 3.5 kPa will be seen by he energy calculator as 50%.  For pressure readings be sure to tick the Pressure box.  Heat energy readings are normally 0%-100% and do not require any adjustment to this  setting.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Meter Label'),QApplication.translate('HelpDlg','A user defined label for the meter.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Meter Unit'),QApplication.translate('HelpDlg','The energy unit for the data read from the Extra Device.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Meter Type'),QApplication.translate('HelpDlg','The type of fuel measured by this meter.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Meter Source'),QApplication.translate('HelpDlg','The Extra Device holding the scaled energy data.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Electric Energy Mix'),QApplication.translate('HelpDlg','This setting allows to set a mix of renewable energy that sources the electric loads.  0% assumes all the energy comes from burning dirty coal and maximizes the CO2 in the calculations.  100% assumes the energy comes only from renewable sources with no CO2 produced.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Gas Energy Mix'),QApplication.translate('HelpDlg','This setting allows to set a mix of bio gas in the NG source.  0% thus means no bio gas.  100% bio gas is estimated to reduce GHG emissions by approximately 24%.')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Save Defaults'),QApplication.translate('HelpDlg','Stores the current settings on this sub-tab as defaults to be recalled later.  The default values will be stored when saving settings (Help>Save Settings) to a file.  ')])
    tbl_Loads.add_row([QApplication.translate('HelpDlg','Restore Defaults'),QApplication.translate('HelpDlg','Overwrites the values on this sub-tab with those stored as the defaults.  When a profile with energy settings is opened, the values on this tab will be read from the profile.   They will be overwritten when clicking Restore Defaults.')])
    strlist.append(tbl_Loads.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('<br/><br/><b>')
    strlist.append(QApplication.translate('HelpDlg','3. Protocol Sub-Tab'))
    strlist.append('</b>')
    tbl_Protocoltop = prettytable.PrettyTable()
    tbl_Protocoltop.header = False
    tbl_Protocoltop.add_row([QApplication.translate('HelpDlg','The Protocol settings allow including Pre-Heating, Between Batch (BBP) and Cooling protocol energy consumption.  There are two ways to specify these values.  The first assumes a constant load setting for a defined period of time.  An example for pre-heating is to set a Duration of 45:00 (45 minutes) at 30% Burner setting.  Percentages must be entered with the percent sign (30%).  When a percentage is entered  a corresponding Duration must be entered.')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','The second type of entry is a "measured" energy value.  This can be any value greater than 1.0.  Artisan can inspect the open profile to determine energy values for each Load that is associated with an Event on the Loads sub-tab.  Click the [...] button for each Protocol to auto fill the Measured Energy fields.   The Artisan measurements for Pre-Heating and Between Batches are made from the start of the profile until CHARGE.  If there is no CHARGE event the measurement is from the start to the end of profile.  The values measured for Pre-Heating and Between Batches are the same.  Be sure you do not use the same profile to enter both values.  The Cooling energy is measured from DROP to the end of the profile.  If there is no DROP event the measurement begins at CHARGE.  If there is no CHARGE event the measurement is from the start to the end of the profile.')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','To use the Artisan energy measurement feature you will need to record one or more profiles that include the protocol of interest.  For example, to measure the Pre-Heating energy, START recording when the roaster is turned on.  Let Artisan record the entire pre-heating procedure.  At the end of the pre-heating you can either STOP recording the profile or go forward with the roast.  The CHARGE event will mark the end of pre-heating when Artisan measures the pre-heat energy.  Similarly a Between Batches protocol can be recorded with START followed by a normal roast.  A Cooling protocol would be captured by not turning the Artisan recording OFF until the roaster is fully cooled.')+newline+QApplication.translate('HelpDlg','')+newline+QApplication.translate('HelpDlg','The Artisan measurements for Pre-Heating and Between Batches are made from the start of the profile until CHARGE.  If there is no CHARGE event the measurement is from the start to the end of profile.  The values measured for Pre-Heating and Between Batches are the same.  Be sure you do not use the same profile to enter both values.  The Cooling energy is measured from DROP to the end of the profile.  If there is no DROP event the measurement begins at CHARGE.  If there is no CHARGE event the measurement is from the start to the end of the profile.')])
    strlist.append(tbl_Protocoltop.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    tbl_Protocol = prettytable.PrettyTable()
    tbl_Protocol.field_names = [QApplication.translate('HelpDlg','Field'),QApplication.translate('HelpDlg','Description')]
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Pre-Heating'),QApplication.translate('HelpDlg','This row sets the values for pre-heating energy.  Percentage or measured values may be entered for each burner.  When a percentage is used the Duration field must be set.\n\nPre-Heating energy is applied only to the first batch of a roasting session.')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Between Batches'),QApplication.translate('HelpDlg','This row sets the values for between batches protocol for the roasting session.  Percentage or measured values may be entered for each burner.  When a percentage is used the Duration field must be set.\n\nBetween Batches energy is applied to each batch of the roasting session, except the first batch.  Tick the &#39;Between Batches after Pre-Heating&#39; box to apply Between Batches energies to the first batch of the session too.')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Cooling'),QApplication.translate('HelpDlg','This row sets the values for the energy used for cooling.  Most common loads are motors and blowers that consume energy during the roaster cool down period.  Percentage or measured values may be entered for each burner.  When a percentage is used the Duration field must be set.\n\nPre-Heating energy is applied only to the first batch of a roasting session.')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Duration'),QApplication.translate('HelpDlg','The length (mm:ss) of protocol.  It is used with a burner&#39;s percentage setting to calculate the energy consumed  by that burner.  When a percentage entry is made for the burner, the Duration field must be set.')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Measured Energy or Output %'),QApplication.translate('HelpDlg','The value is either the measured energy for the protocol or the burner constant percentage setting for the length of the Duration field.')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Measure Profile [...]'),QApplication.translate('HelpDlg','Energy is measured from the open profile for each load where an event is specified on the Loads tab.  Click OK to auto fill in the associated Measured Energy field.')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Between Batches after Pre-Heating'),QApplication.translate('HelpDlg','This box should be ticked when a Between Batches protocol run is done after the Pre-heating and before the roast.')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Save Defaults'),QApplication.translate('HelpDlg','Stores the current settings on this sub-tab as defaults to be recalled later.  The default values will be stored when saving settings (Help>Save Settings) to a file.  ')])
    tbl_Protocol.add_row([QApplication.translate('HelpDlg','Restore Defaults'),QApplication.translate('HelpDlg','Overwrites the values on this sub-tab with those stored as the defaults.  When a profile with energy settings is opened, the values on this tab will be read from the profile.   They will be overwritten when clicking Restore Defaults.')])
    strlist.append(tbl_Protocol.get_html_string(attributes={'width':'100%','border':'1','padding':'1','border-collapse':'collapse'}))
    strlist.append('</body>')
    helpstr = ''.join(strlist)
    return re.sub(r'&amp;', r'&',helpstr)
